name: Build and diff Nix systems

on:
  pull_request:
    paths-ignore: ["nixos/pkgs/**"]
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main
    paths:
      - .github/workflows/**
      - "**.nix"
      - "flake.lock"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  EXCLUDED_HOSTS: '["iso","rpi4"]'
  TMPDIR: /tmp

jobs:
  nix-matrix:
    runs-on: arc-runner-set-nix-config
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install xz-utils
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y xz-utils;

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            accept-flake-config = true

      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -Eeu
          matrix="$(nix eval --json '.#evalHosts' | jq -cM --argjson exclude_hosts '${{ env.EXCLUDED_HOSTS }}' 'del(.include[] | select(.host as $host | $exclude_hosts | index($host)))')"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

      - name: show output
        run: |
          echo "${{ toJson(steps.set-matrix.outputs.matrix) }}" >> "${GITHUB_STEP_SUMMARY}"

  nix-build:
    if: github.event.pull_request.draft == false
    needs: nix-matrix
    permissions:
      contents: read
      pull-requests: write
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix: ${{ fromJSON(needs.nix-matrix.outputs.matrix) }}
    env:
      USER: 1001
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Install requirements
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y xz-utils;

      - name: Install node
        run: |
          if [ "${RUNNER_OS,,}" = "windows" ]
          then
            choco install nodejs -y
            echo "C:\Program Files\nodejs" >> $GITHUB_PATH
          else
            curl -sS https://webi.sh/node | sh
            echo ~/.local/opt/node/bin >> $GITHUB_PATH
          fi

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            accept-flake-config = true
            always-allow-substitutes = true
            builders-use-substitutes = true
            extra-platforms = aarch64-linux

      - name: Set up Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Set up Cachix
        uses: cachix/cachix-action@v15
        if: ${{ !github.event.pull_request.head.repo.fork }}
        with:
          name: mavy
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Install NVD
        run: nix profile install nixpkgs#nvd

      - name: Garbage collect build dependencies
        run: nix-collect-garbage

      - name: Build previous ${{ matrix.host }} system
        run: |
          nix build \
            "github:NNMavy/nix-config#top.${{ matrix.host }}" \
            -o result-previous \
            --log-format raw \
            --fallback \
            > >(tee stdout.log) 2> >(tee /tmp/nix-build-err.log >&2)

      - name: Build new ${{ matrix.host }} system
        run: |
          set -o pipefail
          nix build \
            ".#top.${{ matrix.host }}" \
            -o result-new \
            --fallback \
            --log-format raw \
             > >(tee stdout.log) 2> >(tee /tmp/nix-build-err.log >&2)

      - name: Output build failure
        if: failure()
        run: |
          drv=$(grep "For full logs, run" /tmp/nix-build-err.log | grep -oE "/nix/store/.*.drv")
          if [ -n $drv ]; then
            nix log $drv
            echo $drv
          fi
          exit 1

      - name: Diff profile
        id: diff
        run: |
          delimiter="$(openssl rand -hex 16)"
          echo "diff<<${delimiter}" >> "${GITHUB_OUTPUT}"
          nvd --color never diff ./result-previous ./result-new | sed '/<<</d; />>>/d' >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Comment report in pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: "${{ steps.app-token.outputs.token }}"
          header: ".#top.${{ matrix.host }}"
          message: |
            ### Report for `${{ matrix.host }}`

            <summary> Version changes </summary> <br>
            <pre> ${{ steps.diff.outputs.diff }} </pre>

  nix-build-success:
    if: ${{ always() }}
    needs:
      - nix-build
    name: Nix Build Successful
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        name: Check matrix status
        run: exit 1
